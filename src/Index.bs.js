// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var ReactDOMRe = require("reason-react/src/ReactDOMRe.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function Index$Slider(Props) {
  var min = Props.min;
  var max = Props.max;
  var match = Props.step;
  var step = match !== undefined ? match : 1.0;
  var label = Props.label;
  var onChange = Props.onChange;
  var match$1 = React.useState((function () {
          return (min + Caml_format.caml_int_of_string(max) | 0) / 2 | 0;
        }));
  var setValue = match$1[1];
  var value = match$1[0];
  var timeoutRef = React.useRef(undefined);
  var changeValue = function (e) {
    var match = timeoutRef.current;
    if (match !== undefined) {
      return /* () */0;
    } else {
      var value = e.target.value;
      var timeoutId = setTimeout((function (param) {
              timeoutRef.current = undefined;
              return Curry._1(setValue, value);
            }), 10);
      timeoutRef.current = Caml_option.some(timeoutId);
      return /* () */0;
    }
  };
  React.useEffect((function () {
          Curry._1(onChange, value);
          return undefined;
        }), /* array */[value]);
  return React.createElement("div", undefined, React.createElement("input", {
                  max: max,
                  min: min,
                  step: step,
                  type: "range",
                  value: String(value),
                  onChange: changeValue
                }), React.createElement("label", undefined, label, String(value)));
}

var Slider = /* module */[/* make */Index$Slider];

var $$window = window;

var $$Document = /* module */[/* window */$$window];

var Canvas = /* module */[];

function getNthPoint(width, height, radius, modulo, n) {
  var n_float = n;
  var modulo_float = modulo;
  var centerX = width / 2;
  var centerY = height / 2;
  var pi = Math.PI;
  var dx = radius * Math.cos(2 * pi * n_float / modulo_float);
  var dy = radius * Math.sin(2 * pi * n_float / modulo_float);
  return /* tuple */[
          centerX + dx,
          centerY + dy
        ];
}

function drawOnCanvas(ctx, modulo, multiplier, width, height) {
  var width_float = width;
  var height_float = height;
  var radius = 0.5 * Math.min(width_float * 0.75, height_float * 0.75);
  ctx.clearRect(0, 0, width_float, height_float);
  ctx.beginPath();
  for(var ii = 0 ,ii_finish = modulo - 1 | 0; ii <= ii_finish; ++ii){
    var match = getNthPoint(width_float, height_float, radius, modulo, ii);
    var to_index = Caml_int32.mod_(Caml_int32.imul(ii, multiplier), modulo);
    var match$1 = getNthPoint(width_float, height_float, radius, modulo, to_index);
    ctx.moveTo(match[0], match[1]);
    ctx.lineTo(match$1[0], match$1[1]);
  }
  ctx.stroke();
  ctx.closePath();
  return /* () */0;
}

function Index$ModuloTimesTable(Props) {
  var modulo = Props.modulo;
  var multiplier = Props.multiplier;
  var width = Props.width;
  var height = Props.height;
  var canvasRef = React.useRef(null);
  React.useEffect((function (param) {
          var canvas = canvasRef.current;
          if (!(canvas == null)) {
            canvas.width = width;
            canvas.height = height;
            var ctx = canvas.getContext("2d");
            drawOnCanvas(ctx, modulo, multiplier, width, height);
          }
          return undefined;
        }), /* tuple */[
        modulo,
        multiplier,
        width,
        height
      ]);
  return React.createElement("canvas", {
              ref: canvasRef
            }, "Canvas not supported!?");
}

var ModuloTimesTable = /* module */[/* make */Index$ModuloTimesTable];

function logEvent(_event) {
  console.log("app: clicked!", _event);
  return /* () */0;
}

var height = $$window.innerHeight;

var width = $$window.innerWidth;

function Index$App(Props) {
  var match = React.useState((function () {
          return 10;
        }));
  var setModulo = match[1];
  var match$1 = React.useState((function () {
          return 2;
        }));
  var setMultiplier = match$1[1];
  var changeModulo = function (newModulo) {
    return Curry._1(setModulo, (function (param) {
                  return newModulo;
                }));
  };
  var changeMultiplier = function (newMultiplier) {
    return Curry._1(setMultiplier, (function (param) {
                  return newMultiplier;
                }));
  };
  return React.createElement(React.Fragment, undefined, React.createElement("div", undefined, React.createElement(Index$Slider, {
                      min: 3,
                      max: "1200",
                      label: "modulo",
                      onChange: changeModulo
                    }), React.createElement(Index$Slider, {
                      min: 2,
                      max: "500",
                      label: "multiplier",
                      onChange: changeMultiplier
                    })), React.createElement(Index$ModuloTimesTable, {
                  modulo: match[0],
                  multiplier: match$1[0],
                  width: width,
                  height: height
                }));
}

var App = /* module */[
  /* logEvent */logEvent,
  /* height */height,
  /* width */width,
  /* make */Index$App
];

ReactDOMRe.renderToElementWithId(React.createElement(Index$App, { }), "app");

exports.Slider = Slider;
exports.$$Document = $$Document;
exports.Canvas = Canvas;
exports.getNthPoint = getNthPoint;
exports.drawOnCanvas = drawOnCanvas;
exports.ModuloTimesTable = ModuloTimesTable;
exports.App = App;
/* window Not a pure module */
