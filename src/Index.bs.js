// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactDOMRe = require("reason-react/src/ReactDOMRe.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function debounce(f, ms) {
  var timerId = /* record */[/* contents */undefined];
  return (function (ev) {
      var match = timerId[0];
      if (match !== undefined) {
        return /* () */0;
      } else {
        var value = ev.target.value;
        timerId[0] = Caml_option.some(setTimeout((function (param) {
                    return Curry._1(f, value);
                  }), ms));
        return /* () */0;
      }
    });
}

function Index$Slider(Props) {
  var min = Props.min;
  var max = Props.max;
  var match = Props.step;
  var step = match !== undefined ? match : 1.0;
  var label = Props.label;
  var onChange = Props.onChange;
  var match$1 = React.useState((function () {
          return (min + Caml_format.caml_int_of_string(max) | 0) / 2 | 0;
        }));
  var setValue = match$1[1];
  var value = match$1[0];
  var timeoutRef = React.useRef(undefined);
  var changeValue = function (e) {
    var match = timeoutRef.current;
    if (match !== undefined) {
      return /* () */0;
    } else {
      var value = e.target.value;
      var timeoutId = setTimeout((function (param) {
              timeoutRef.current = undefined;
              return Curry._1(setValue, value);
            }), 10);
      timeoutRef.current = Caml_option.some(timeoutId);
      return /* () */0;
    }
  };
  React.useEffect((function () {
          Curry._1(onChange, value);
          return undefined;
        }), /* array */[value]);
  return React.createElement("div", undefined, React.createElement("input", {
                  max: max,
                  min: min,
                  step: step,
                  type: "range",
                  value: String(value),
                  onChange: changeValue
                }), React.createElement("label", undefined, label, String(value)));
}

var Slider = /* module */[/* make */Index$Slider];

function logEvent(_event) {
  console.log("clicked!", _event);
  return /* () */0;
}

function Index$App(Props) {
  Props.message;
  return React.createElement(React.Fragment, undefined, React.createElement("div", undefined, React.createElement(Index$Slider, {
                      min: 3,
                      max: "1200",
                      label: "modulo",
                      onChange: logEvent
                    }), React.createElement(Index$Slider, {
                      min: 2,
                      max: "1003",
                      step: 0.002,
                      label: "multiplier",
                      onChange: logEvent
                    })), React.createElement("canvas", {
                  id: "canvas"
                }, "Canvas not supported!?"));
}

var App = /* module */[
  /* logEvent */logEvent,
  /* make */Index$App
];

ReactDOMRe.renderToElementWithId(React.createElement(Index$App, {
          message: "Hello! Click this text."
        }), "app");

exports.debounce = debounce;
exports.Slider = Slider;
exports.App = App;
/*  Not a pure module */
