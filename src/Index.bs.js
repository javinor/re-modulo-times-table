// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var ReactDOMRe = require("reason-react/src/ReactDOMRe.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function Index$SliderInt(Props) {
  var min = Props.min;
  var max = Props.max;
  var match = Props.step;
  var step = match !== undefined ? match : 1;
  var label = Props.label;
  var onChange = Props.onChange;
  var match$1 = React.useState((function () {
          return (min + max | 0) / 2 | 0;
        }));
  var setValue = match$1[1];
  var value = match$1[0];
  var timeoutRef = React.useRef(undefined);
  var changeValue = function (e) {
    var match = timeoutRef.current;
    if (match !== undefined) {
      return /* () */0;
    } else {
      var value = e.target.value;
      var timeoutId = setTimeout((function (param) {
              timeoutRef.current = undefined;
              return Curry._1(setValue, value);
            }), 10);
      timeoutRef.current = Caml_option.some(timeoutId);
      return /* () */0;
    }
  };
  React.useEffect((function () {
          Curry._1(onChange, value);
          return undefined;
        }), /* array */[value]);
  return React.createElement("div", undefined, React.createElement("input", {
                  max: String(max),
                  min: min,
                  step: step,
                  type: "range",
                  value: String(value),
                  onChange: changeValue
                }), React.createElement("label", undefined, label + (" " + String(value))));
}

var SliderInt = /* module */[/* make */Index$SliderInt];

function Index$SliderFloat(Props) {
  var min = Props.min;
  var max = Props.max;
  var step = Props.step;
  var label = Props.label;
  var onChange = Props.onChange;
  var match = React.useState((function () {
          return (min + max) / 2;
        }));
  var setValue = match[1];
  var value = match[0];
  var timeoutRef = React.useRef(undefined);
  var changeValue = function (e) {
    var match = timeoutRef.current;
    if (match !== undefined) {
      return /* () */0;
    } else {
      var value = e.target.value;
      var timeoutId = setTimeout((function (param) {
              timeoutRef.current = undefined;
              return Curry._1(setValue, value);
            }), 10);
      timeoutRef.current = Caml_option.some(timeoutId);
      return /* () */0;
    }
  };
  React.useEffect((function () {
          Curry._1(onChange, value);
          return undefined;
        }), /* array */[value]);
  return React.createElement("div", undefined, React.createElement("input", {
                  max: max.toString(),
                  min: min | 0,
                  step: step,
                  type: "range",
                  value: value.toString(),
                  onChange: changeValue
                }), React.createElement("label", undefined, label + (" " + value.toString())));
}

var SliderFloat = /* module */[/* make */Index$SliderFloat];

var $$window = window;

var $$Document = /* module */[/* window */$$window];

var Canvas = /* module */[];

function getNthPoint(width, height, radius, modulo, n) {
  var n_float = n;
  var modulo_float = modulo;
  var centerX = width / 2;
  var centerY = height / 2;
  var pi = Math.PI;
  var dx = radius * Math.cos(2 * pi * n_float / modulo_float);
  var dy = radius * Math.sin(2 * pi * n_float / modulo_float);
  return /* tuple */[
          centerX + dx,
          centerY + dy
        ];
}

function drawOnCanvas(ctx, modulo, multiplier, width, height) {
  var width_float = width;
  var height_float = height;
  var radius = 0.5 * Math.min(width_float * 0.75, height_float * 0.75);
  ctx.clearRect(0, 0, width_float, height_float);
  ctx.beginPath();
  for(var ii = 0 ,ii_finish = modulo - 1 | 0; ii <= ii_finish; ++ii){
    var match = getNthPoint(width_float, height_float, radius, modulo, ii);
    var to_index = Caml_int32.mod_(ii * multiplier | 0, modulo);
    var match$1 = getNthPoint(width_float, height_float, radius, modulo, to_index);
    ctx.moveTo(match[0], match[1]);
    ctx.lineTo(match$1[0], match$1[1]);
  }
  ctx.stroke();
  ctx.closePath();
  return /* () */0;
}

function Index$ModuloTimesTable(Props) {
  var modulo = Props.modulo;
  var multiplier = Props.multiplier;
  var width = Props.width;
  var height = Props.height;
  var canvasRef = React.useRef(null);
  React.useEffect((function (param) {
          var canvas = canvasRef.current;
          if (!(canvas == null)) {
            canvas.width = width;
            canvas.height = height;
            var ctx = canvas.getContext("2d");
            drawOnCanvas(ctx, modulo, multiplier, width, height);
          }
          return undefined;
        }), /* tuple */[
        modulo,
        multiplier,
        width,
        height
      ]);
  return React.createElement("canvas", {
              ref: canvasRef
            }, "Canvas not supported!?");
}

var ModuloTimesTable = /* module */[/* make */Index$ModuloTimesTable];

function getWindowSize(param) {
  return /* tuple */[
          $$window.innerWidth,
          $$window.innerHeight
        ];
}

function Index$App(Props) {
  var match = React.useState((function () {
          return getWindowSize(/* () */0);
        }));
  var setSize = match[1];
  var match$1 = match[0];
  var match$2 = React.useState((function () {
          return 10;
        }));
  var setModulo = match$2[1];
  var match$3 = React.useState((function () {
          return 2;
        }));
  var setMultiplier = match$3[1];
  React.useEffect((function () {
          var updateSize = function (param) {
            return Curry._1(setSize, (function (param) {
                          return getWindowSize(/* () */0);
                        }));
          };
          $$window.addEventListener("resize", updateSize);
          return (function (param) {
                    $$window.removeEventListener("resize", updateSize);
                    return /* () */0;
                  });
        }));
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "controls"
                }, React.createElement(Index$SliderInt, {
                      min: 3,
                      max: 600,
                      step: 1,
                      label: "modulo",
                      onChange: (function (newVal) {
                          return Curry._1(setModulo, (function (param) {
                                        return newVal;
                                      }));
                        })
                    }), React.createElement(Index$SliderFloat, {
                      min: 2,
                      max: 20,
                      step: 0.00001,
                      label: "multiplier",
                      onChange: (function (newVal) {
                          return Curry._1(setMultiplier, (function (param) {
                                        return newVal;
                                      }));
                        })
                    })), React.createElement(Index$ModuloTimesTable, {
                  modulo: match$2[0],
                  multiplier: match$3[0],
                  width: match$1[0],
                  height: match$1[1]
                }));
}

var App = /* module */[
  /* getWindowSize */getWindowSize,
  /* make */Index$App
];

ReactDOMRe.renderToElementWithId(React.createElement(Index$App, { }), "app");

exports.SliderInt = SliderInt;
exports.SliderFloat = SliderFloat;
exports.$$Document = $$Document;
exports.Canvas = Canvas;
exports.getNthPoint = getNthPoint;
exports.drawOnCanvas = drawOnCanvas;
exports.ModuloTimesTable = ModuloTimesTable;
exports.App = App;
/* window Not a pure module */
